name: Deploy to AWS Fargate

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up SonarCloud
        uses: sonarsource/sonarqube-scan-action@v5.0.0
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: "-Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORG }}"

      - name: Check SonarCloud Quality Gate status
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          RESULT=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
          echo "SonarCloud API response: $RESULT"
          STATUS=$(echo $RESULT | jq -r '.projectStatus.status')
          if [ "$STATUS" != "OK" ]; then
            echo "SonarCloud Quality Gate failed! Status: $STATUS"
            echo "Details:"
            echo $RESULT | jq -r '.projectStatus.conditions[] | select(.status == "ERROR") | "Metric: \(.metricKey) - Actual Value: \(.actualValue) - Error Threshold: \(.errorThreshold)"'
            exit 1
          else
            echo "SonarCloud Quality Gate passed!"
          fi

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Reemplaza el login manual de ECR con la acci√≥n de login de Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      # Construir la imagen Docker con el nombre del repositorio de ECR
      - name: Build Docker image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest .

      # Etiquetar la imagen Docker para subirla a ECR
      - name: Tag Docker image
        run: |
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # Subir la imagen Docker a ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # Actualizar el servicio de ECS para hacer un despliegue con la nueva imagen
      - name: Update ECS service on Fargate
        run: |
          aws ecs update-service \
            --cluster deployFargate-cluster \
            --service testFargate-service \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
