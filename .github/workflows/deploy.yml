name: Deploy to AWS Fargate

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 



      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
      
      - name: Build, tag, and push Docker image to ECR
        run: |
          # Construir la imagen Docker y etiquetarla en un solo paso
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest .
          
          # Empujar la imagen construida al repositorio de ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # Actualizar el servicio de ECS para hacer un despliegue con la nueva imagen
      - name: Update ECS service on Fargate
        run: |
          aws ecs update-service \
            --cluster deployFargate-cluster \
            --service testFargate-service \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Verificar estado del despliegue en Fargate
        run: |
          echo "Esperando 30 segundos para que el nuevo servicio se inicie..."
          sleep 30
          
          TASK_ID=$(aws ecs list-tasks --cluster deployFargate-cluster --service-name testFargate-service --desired-status RUNNING --query "taskArns[-1]" --output text)
          echo "ID de la nueva tarea en ejecución: $TASK_ID"
          # Bucle para esperar que la tarea entre en estado RUNNING
          MAX_ATTEMPTS=30  # Máximo de intentos para evitar un bucle infinito
          ATTEMPT=0
          while true; do
            TASK_STATUS=$(aws ecs describe-tasks --cluster deployFargate-cluster --tasks $TASK_ID --query "tasks[0].lastStatus" --output text)
            echo "Estado actual de la tarea: $TASK_STATUS"
            
            if [ "$TASK_STATUS" == "RUNNING" ]; then
              echo "La tarea está en estado RUNNING y funcionando correctamente."
              break
            fi
            
            # Verificar si la tarea falló y obtener el motivo
            if [ "$TASK_STATUS" == "STOPPED" ]; then
              REASON=$(aws ecs describe-tasks --cluster deployFargate-cluster --tasks $TASK_ID --query "tasks[0].stoppedReason" --output text)
              echo "Error: La tarea no está en estado RUNNING. Motivo del fallo: $REASON"
              exit 1
            fi
            # Si no está en estado RUNNING, intentamos de nuevo hasta alcanzar el máximo de intentos
            if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
              echo "Error: La tarea no ha cambiado al estado RUNNING después de varios intentos."
              exit 1
            fi
            # Incrementar el contador de intentos
            ATTEMPT=$((ATTEMPT + 1))
            echo "Esperando 5 segundos antes de reintentar..."
            sleep 5
          done
