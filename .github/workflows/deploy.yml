name: Deploy to AWS Fargate

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up SonarCloud
        uses: sonarsource/sonarqube-scan-action@v5.0.0
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: "-Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORG }}"

      - name: Check SonarCloud Quality Gate status
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          RESULT=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
          echo "SonarCloud API response: $RESULT"
          STATUS=$(echo $RESULT | jq -r '.projectStatus.status')
          if [ "$STATUS" != "OK" ]; then
            echo "SonarCloud Quality Gate failed! Status: $STATUS"
            echo "Details:"
            echo $RESULT | jq -r '.projectStatus.conditions[] | select(.status == "ERROR") | "Metric: \(.metricKey) - Actual Value: \(.actualValue) - Error Threshold: \(.errorThreshold)"'
            exit 1
          else
            echo "SonarCloud Quality Gate passed!"
          fi

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
      
      - name: Build, tag, and push Docker image to ECR
        run: |
          # Construir la imagen Docker y etiquetarla en un solo paso
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest .
          
          # Empujar la imagen construida al repositorio de ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # Actualizar el servicio de ECS para hacer un despliegue con la nueva imagen
      - name: Update ECS service on Fargate
        run: |
          aws ecs update-service \
            --cluster deployFargate-cluster \
            --service testFargate-service \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Verificar estado del despliegue en Fargate
        run: |
          # Obtener el estado del servicio ECS
          SERVICE_STATUS=$(aws ecs describe-services --cluster deployFargate-cluster --services testFargate-service --query "services[0].status" --output text)
      
          # Obtener el ID de las tareas en ejecución
          TASK_ID=$(aws ecs list-tasks --cluster deployFargate-cluster --service-name testFargate-service --query "taskArns[0]" --output text)
          echo "ID de la tarea en ejecución: $TASK_ID"
          # Comprobar si el servicio está activo
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "Error: El servicio no está activo. Estado del servicio: $SERVICE_STATUS"
            exit 1
          fi
      
          # Comprobar el estado de la tarea si existe al menos una
          if [ "$TASK_ID" == "None" ]; then
            echo "Error: No hay tareas en ejecución en el servicio."
            exit 1
          fi
      
          # Obtener el estado de la tarea
          TASK_STATUS=$(aws ecs describe-tasks --cluster deployFargate-cluster --tasks $TASK_ID --query "tasks[0].lastStatus" --output text)
      
          if [ "$TASK_STATUS" != "RUNNING" ]; then
            echo "Error: La tarea no está corriendo. Estado de la tarea: $TASK_STATUS"
            exit 1
          fi
      
          # Verificar eventos del servicio para detectar errores comunes
          EVENTS=$(aws ecs describe-services --cluster deployFargate-cluster --services testFargate-service --query "services[0].events" --output text)
          if [[ "$EVENTS" == *"Unable to place a task"* || "$EVENTS" == *"Insufficient capacity"* || "$EVENTS" == *"Task definition not found"* ]]; then
            echo "Error crítico en el despliegue: $EVENTS"
            exit 1
          fi
      
          echo "El servicio está activo y las tareas están corriendo correctamente."
