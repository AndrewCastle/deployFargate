name: Desplegar a AWS Fargate

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Revisar código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Configurar SonarCloud
        uses: sonarsource/sonarqube-scan-action@v5.0.0
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: "-Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORG }}"

      - name: Verificar el estado del Quality Gate de SonarCloud
        run: |
          echo "Verificando el estado del Quality Gate de SonarCloud..."
          RESULT=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
          echo "Respuesta de la API de SonarCloud: $RESULT"
          STATUS=$(echo $RESULT | jq -r '.projectStatus.status')
          if [ "$STATUS" != "OK" ]; then
            echo "¡Quality Gate de SonarCloud falló! Estado: $STATUS"
            echo "Detalles:"
            echo $RESULT | jq -r '.projectStatus.conditions[] | select(.status == "ERROR") | "Métrica: \(.metricKey) - Valor Actual: \(.actualValue) - Umbral de Error: \(.errorThreshold)"'
            exit 1
          else
            echo "¡Quality Gate de SonarCloud aprobado!"
          fi

      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Iniciar sesión en Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
      
      - name: Construir, etiquetar y subir la imagen Docker a ECR
        run: |
          # Construir la imagen Docker y etiquetarla en un solo paso
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest .
          
          # Empujar la imagen construida al repositorio de ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Actualizar el servicio ECS en Fargate
        run: |
          aws ecs update-service \
            --cluster deployFargate-cluster \
            --service testFargate-service \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
            
      - name: Monitorizar el despliegue del servicio ECS
        run: |
          # Inicializar monitoreo de la implementación
          echo "Monitoreando el despliegue del servicio ECS..."
      
          # Obtener el ID de la implementación
          DEPLOYMENT_ID=$(aws ecs describe-services \
            --cluster deployFargate-cluster \
            --services testFargate-service \
            --query 'services[0].deployments[?status==`PRIMARY`].id' \
            --output text)
          echo "Monitoreando el despliegue con ID: $DEPLOYMENT_ID"
      
          # Función para obtener el estado del rollout
          get_rollout_state() {
            aws ecs describe-services \
              --cluster deployFargate-cluster \
              --services testFargate-service \
              --query 'services[0].deployments[0].rolloutState' \
              --output text
          }
      
          # Función para obtener el mensaje de error del rollout
          get_error_message() {
            aws ecs describe-services \
              --cluster deployFargate-cluster \
              --services testFargate-service \
              --query 'services[0].deployments[0].rolloutStateReason' \
              --output text
          }
      
          # Monitorear el estado de la implementación hasta que sea COMPLETADO o FALLIDO
          while true; do
            CURRENT_ROLL_OUT_STATE=$(get_rollout_state)
            echo "Estado actual del rollout: $CURRENT_ROLL_OUT_STATE"
      
            case "$CURRENT_ROLL_OUT_STATE" in
              "IN_PROGRESS")
                echo "Despliegue en progreso, esperando que el estado cambie a COMPLETADO..."
                sleep 20
                ;;
              "COMPLETED")
                echo "Despliegue completado satisfactoriamente."
                break
                ;;
              "FAILED")
                ERROR_MESSAGE=$(get_error_message)
                echo "Despliegue fallido. Error: $ERROR_MESSAGE"
                exit 1
                ;;
              *)
                echo "Estado inesperado: $CURRENT_ROLL_OUT_STATE"
                exit 1
                ;;
            esac
          done
